package slimy

import "testing"

func checkResults(t *testing.T, got, expected []SearchResult) {
	if len(got) != len(expected) {
		t.Fatalf("Wrong number of results: expected %d, got %d", len(expected), len(got))
	}

	for i := range got {
		if got[i] != expected[i] {
			t.Fatalf("Incorrect result at index %d: expected %v, got %v", i, expected[i], got[i])
		}
	}
}

func TestSearch100(t *testing.T) {
	mask := Mask{8, 1}
	world := World(1)
	checkResults(t, world.Search(0, 0, 0, 100, 100, 30, mask), []SearchResult{
		{33, 9, 30}, {32, 8, 33}, {32, 52, 31}, {32, 58, 56}, {32, 18, 79}, {32, 58, 57}, {32, 64, 113}, {32, 61, 117},
		{32, 62, 117}, {32, 62, 118}, {31, 17, 24}, {31, 17, 25}, {31, 10, 29}, {31, 8, 30}, {31, 17, 26}, {31, 8, 31},
		{31, 11, 31}, {31, 8, 32}, {31, 9, 32}, {31, 48, 29}, {31, 50, 32}, {31, 51, 32}, {31, 51, 33}, {31, 49, 36},
		{31, 51, 35}, {31, 18, 78}, {31, 19, 78}, {31, 17, 80}, {31, 17, 81}, {31, 28, 82}, {31, 88, 26}, {31, 89, 26},
		{31, 95, 20}, {31, 96, 19}, {31, 80, 79}, {31, 62, 114}, {31, 62, 115}, {31, 63, 116}, {31, 61, 118}, {31, 63, 117},
		{31, 64, 117}, {31, 63, 118}, {31, 66, 118}, {30, 17, 23}, {30, 16, 26}, {30, 10, 30}, {30, 18, 26}, {30, 9, 31},
		{30, 10, 31}, {30, 47, 28}, {30, 47, 31}, {30, 47, 32}, {30, 30, 49}, {30, 51, 31}, {30, 50, 33}, {30, 50, 34},
		{30, 51, 34}, {30, 52, 35}, {30, 15, 77}, {30, 18, 77}, {30, 19, 77}, {30, 16, 78}, {30, 58, 55}, {30, 17, 79},
		{30, 59, 56}, {30, 18, 80}, {30, 27, 83}, {30, 89, 24}, {30, 89, 25}, {30, 95, 18}, {30, 82, 88}, {30, 63, 114},
		{30, 65, 113}, {30, 64, 114}, {30, 61, 116}, {30, 65, 114}, {30, 60, 117}, {30, 62, 116}, {30, 60, 118}, {30, 65, 117},
		{30, 64, 118},
	})
}

func TestSearchMaskTooBig(t *testing.T) {
	mask := Mask{64, 1}
	world := World(1)

	func() {
		defer func() {
			if err := recover(); err == nil {
				t.Error("Expected mask bounds error")
			} else if err != "Mask bounds exceed section size" {
				panic(err)
			}
		}()
		world.Search(0, 0, 0, 1, 1, 0, mask)
	}()
}

func TestSearch2000(t *testing.T) {
	mask := Mask{128 / 16, 24 / 16}
	world := World(1)
	checkResults(t, world.Search(0, -1000, -1000, 1000, 1000, 40, mask), []SearchResult{
		{43, -409, 422}, {43, -168, 1019}, {43, -167, 1020}, {43, -168, 1020}, {42, -404, 418}, {42, -406, 421}, {42, -408, 420}, {42, -411, 421},
		{42, 569, 435}, {42, -167, 1019}, {41, -409, 419}, {41, -409, 420}, {41, -408, 421}, {41, -410, 420}, {41, -410, 421}, {41, -412, 420},
		{41, -410, 422}, {41, -411, 422}, {41, -410, 423}, {41, 569, 432}, {41, 570, 432}, {41, 570, 433}, {41, 570, 434}, {41, 202, 740},
		{41, -169, 1019}, {41, -167, 1021}, {41, -948, 437}, {40, -405, 418}, {40, -407, 421}, {40, -407, 422}, {40, -412, 422}, {40, 571, 432},
		{40, 570, 435}, {40, -168, 1021}, {40, -947, 437}, {40, -952, 437}, {40, -847, -628}, {40, -847, -630}, {40, 903, -802}, {40, 912, 918},
	})
}

func BenchmarkSearch100(b *testing.B) {
	mask := Mask{8, 1}
	world := World(1)

	for i := 0; i < b.N; i++ {
		world.Search(0, -100, -100, 0, 0, 1_000_000, mask)
	}
}

func BenchmarkSearch1k(b *testing.B) {
	mask := Mask{8, 1}
	world := World(1)

	for i := 0; i < b.N; i++ {
		world.Search(0, -500, -500, 500, 500, 1_000_000, mask)
	}
}

func BenchmarkSearch5k(b *testing.B) {
	mask := Mask{8, 1}
	world := World(1)

	for i := 0; i < b.N; i++ {
		world.Search(0, 0, 0, 5000, 5000, 1_000_000, mask)
	}
}
